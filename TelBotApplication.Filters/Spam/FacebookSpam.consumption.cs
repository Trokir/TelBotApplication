// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.ML;
using Microsoft.ML.Data;
namespace TelBotApplication_Filters
{
    public partial class FacebookSpam
    {
        /// <summary>
        /// model input class for FacebookSpam.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [ColumnName(@"profile id")]
            public float Profile_id { get; set; }

            [ColumnName(@"#friends")]
            public float __friends { get; set; }

            [ColumnName(@"#following")]
            public float __following { get; set; }

            [ColumnName(@"#community")]
            public float __community { get; set; }

            [ColumnName(@"age")]
            public float Age { get; set; }

            [ColumnName(@"#postshared")]
            public float __postshared { get; set; }

            [ColumnName(@"#urlshared")]
            public float __urlshared { get; set; }

            [ColumnName(@"#photos/videos")]
            public float __photos_videos { get; set; }

            [ColumnName(@"fpurls")]
            public float Fpurls { get; set; }

            [ColumnName(@"fpphotos/videos")]
            public float Fpphotos_videos { get; set; }

            [ColumnName(@"avgcomment/post")]
            public float Avgcomment_post { get; set; }

            [ColumnName(@"likes/post")]
            public float Likes_post { get; set; }

            [ColumnName(@"tags/post")]
            public float Tags_post { get; set; }

            [ColumnName(@"#tags/post")]
            public float __tags_post { get; set; }

            [ColumnName(@"Label")]
            public float Label { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for FacebookSpam.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            [ColumnName(@"profile id")]
            public float Profile_id { get; set; }

            [ColumnName(@"#friends")]
            public float __friends { get; set; }

            [ColumnName(@"#following")]
            public float __following { get; set; }

            [ColumnName(@"#community")]
            public float __community { get; set; }

            [ColumnName(@"age")]
            public float Age { get; set; }

            [ColumnName(@"#postshared")]
            public float __postshared { get; set; }

            [ColumnName(@"#urlshared")]
            public float __urlshared { get; set; }

            [ColumnName(@"#photos/videos")]
            public float __photos_videos { get; set; }

            [ColumnName(@"fpurls")]
            public float Fpurls { get; set; }

            [ColumnName(@"fpphotos/videos")]
            public float Fpphotos_videos { get; set; }

            [ColumnName(@"avgcomment/post")]
            public float Avgcomment_post { get; set; }

            [ColumnName(@"likes/post")]
            public float Likes_post { get; set; }

            [ColumnName(@"tags/post")]
            public float Tags_post { get; set; }

            [ColumnName(@"#tags/post")]
            public float __tags_post { get; set; }

            [ColumnName(@"Label")]
            public uint Label { get; set; }

            [ColumnName(@"Features")]
            public float[] Features { get; set; }

            [ColumnName(@"PredictedLabel")]
            public float PredictedLabel { get; set; }

            [ColumnName(@"Score")]
            public float[] Score { get; set; }

        }

        #endregion

        private static readonly string MLNetModelPath = Path.Combine(@"E:\Projects\TelBotApplication\TelBotApplication.Filters\Spam\FacebookSpam.zip");

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            PredictionEngine<ModelInput, ModelOutput>? predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }

        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            MLContext? mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out DataViewSchema _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }
    }
}
